generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Empresa {
  id        Int        @id @default(autoincrement())
  nome      String     @db.VarChar(255)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int?
  deletedBy Int?
  Regional  Regional[]

  @@index([nome])
  @@map("empresas")
}

model Regional {
  id          Int           @id @default(autoincrement())
  nome        String        @db.VarChar(255)
  empresaId   Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  createdBy   Int
  updatedBy   Int?
  deletedBy   Int?
  empresa     Empresa       @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  Subestacoes Subestacoes[]

  @@index([empresaId])
  @@index([nome])
  @@map("regionais")
}

model Subestacoes {
  id                  Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(255)
  sigla               String                @db.VarChar(3)
  localSAP            String                @db.VarChar(255)
  propriedade         PropriedadeSubestacao
  tipo                TipoSubestacao
  categoria           CategoriaSubestacao
  tensao              TensaoSubestacao
  status              StatusSubestacao      @default(ATIVA)
  regionalId          Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int?
  deletedBy           Int?
  Equipamentos        Equipamentos[]
  NotaPlanoManutencao NotaPlanoManutencao[]
  regional            Regional              @relation(fields: [regionalId], references: [id], onDelete: Cascade)

  @@unique([sigla, regionalId])
  @@index([regionalId])
  @@index([sigla])
  @@map("subestacoes")
}

model Equipamentos {
  id                  Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(255)
  subestacaoId        Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int?
  deletedBy           Int?
  Anomalias           Anomalias[]
  subestacao          Subestacoes           @relation(fields: [subestacaoId], references: [id], onDelete: Cascade)
  NotaPlanoManutencao NotaPlanoManutencao[]

  @@index([subestacaoId])
  @@index([nome])
  @@map("equipamentos")
}

model TipoManutencao {
  id                  Int                   @id @default(autoincrement())
  nome                String                @unique @db.VarChar(255)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int?
  deletedBy           Int?
  Kpi                 Kpi[]
  NotaPlanoManutencao NotaPlanoManutencao[]

  @@map("tipos_manutencao")
}

model Kpi {
  id                  Int                   @id @default(autoincrement())
  nome                String                @db.VarChar(255)
  descricao           String                @db.Text
  tipoManutencaoId    Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  deletedAt           DateTime?
  createdBy           Int
  updatedBy           Int?
  deletedBy           Int?
  tipoManutencao      TipoManutencao        @relation(fields: [tipoManutencaoId], references: [id], onDelete: Cascade)
  NotaPlanoManutencao NotaPlanoManutencao[]

  @@unique([nome, tipoManutencaoId])
  @@index([tipoManutencaoId])
  @@map("kpis")
}

model Anomalias {
  id            Int            @id @default(autoincrement())
  nome          String         @db.VarChar(255)
  descricao     String         @db.Text
  notificador   String         @db.VarChar(255)
  status        StatusAnomalia @default(ABERTA)
  equipamentoId Int
  defeitoId     Int
  tipoNota      TipoNota
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  deletedAt     DateTime?
  createdBy     Int
  updatedBy     Int?
  deletedBy     Int?
  defeito       Defeitos       @relation(fields: [defeitoId], references: [id], onDelete: Cascade)
  equipamento   Equipamentos   @relation(fields: [equipamentoId], references: [id], onDelete: Cascade)

  @@index([equipamentoId])
  @@index([defeitoId])
  @@index([status])
  @@map("anomalias")
}

model GrupoDeDefeitos {
  id                         Int                          @id @default(autoincrement())
  nome                       String                       @unique @db.VarChar(255)
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime                     @updatedAt
  deletedAt                  DateTime?
  createdBy                  Int
  updatedBy                  Int?
  deletedBy                  Int?
  GrupoDeDefeitosEquipamento GrupoDeDefeitosEquipamento[]

  @@map("grupos_defeitos")
}

model GrupoDeDefeitosEquipamento {
  id                Int                @id @default(autoincrement())
  grupoDeDefeitosId Int
  equipamento       String             @db.VarChar(255)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  deletedAt         DateTime?
  createdBy         Int
  updatedBy         Int?
  deletedBy         Int?
  grupoDeDefeitos   GrupoDeDefeitos    @relation(fields: [grupoDeDefeitosId], references: [id], onDelete: Cascade)
  SubGrupoDefeitos  SubGrupoDefeitos[]
  Defeitos          Defeitos[]

  @@unique([grupoDeDefeitosId, equipamento])
  @@index([grupoDeDefeitosId])
  @@index([equipamento])
  @@map("grupos_defeitos_equipamentos")
}

model SubGrupoDefeitos {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)

  grupoDefeitoEquipamentoId Int
  grupoDefeitoEquipamento   GrupoDeDefeitosEquipamento @relation(fields: [grupoDefeitoEquipamentoId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int?
  deletedBy Int?
  Defeitos  Defeitos[]

  @@unique([nome, grupoDefeitoEquipamentoId])
  @@index([grupoDefeitoEquipamentoId])
  @@map("subgrupos_defeitos")
}

model Defeitos {
  id         Int               @id @default(autoincrement())
  nome       String            @db.VarChar(255)
  descricao  String            @db.Text
  codigoSAP  String            @unique @db.VarChar(50)
  prioridade PrioridadeDefeito

  subGrupoDefeitosId Int
  subGrupoDefeitos   SubGrupoDefeitos @relation(fields: [subGrupoDefeitosId], references: [id], onDelete: Cascade)

  grupoDefeitosEquipamentoId Int
  grupoDefeitosEquipamento   GrupoDeDefeitosEquipamento @relation(fields: [grupoDefeitosEquipamentoId], references: [id], onDelete: Cascade)

  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int?
  deletedBy Int?
  Anomalias Anomalias[]

  @@index([subGrupoDefeitosId])
  @@index([nome])
  @@map("defeitos")
}

model NotaPlanoManutencao {
  id               Int        @id @default(autoincrement())
  nome             String     @db.VarChar(255)
  numeroSAP        String     @unique @db.VarChar(50)
  status           StatusNota @default(PENDENTE)
  tipoNota         TipoNota
  subestacaoId     Int
  equipamentoId    Int
  tipoManutencaoId Int
  kpiId            Int

  dataLimiteExecucao DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int?
  deletedBy Int?

  equipamento    Equipamentos   @relation(fields: [equipamentoId], references: [id], onDelete: Cascade)
  kpi            Kpi            @relation(fields: [kpiId], references: [id], onDelete: Cascade)
  subestacao     Subestacoes    @relation(fields: [subestacaoId], references: [id], onDelete: Cascade)
  tipoManutencao TipoManutencao @relation(fields: [tipoManutencaoId], references: [id], onDelete: Cascade)

  @@index([subestacaoId])
  @@index([equipamentoId])
  @@index([tipoManutencaoId])
  @@index([kpiId])
  @@index([status])
  @@map("notas_plano_manutencao")
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique @db.VarChar(50)
  email     String?   @unique @db.VarChar(255)
  password  String    @db.VarChar(255)
  name      String?   @db.VarChar(255)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int
  updatedBy Int?
  deletedBy Int?
  accounts  Account[]
  sessions  Session[]

  @@index([username])
  @@index([email])
  @@map("usuarios")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("contas")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessoes")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("tokens_verificacao")
}

enum PropriedadeSubestacao {
  PROPRIA
  COMPARTILHADA
}

enum CategoriaSubestacao {
  DISTRIBUICAO
  SUBTRANSMISSAO
  TRANSMISSAO
}

enum TipoSubestacao {
  MT
  AT
}

enum TensaoSubestacao {
  KV_34
  KV_69
  KV_138
  KV_230
}

enum StatusSubestacao {
  ATIVA
  INATIVA
  EM_MANUTENCAO
}

enum TipoNota {
  AA
  TS
  RSF
}

enum StatusAnomalia {
  ABERTA
  EM_ANALISE
  EM_CORRECAO
  CONCLUIDA
  CANCELADA
}

enum PrioridadeDefeito {
  A
  P1
  P2
  P3
}

enum StatusNota {
  PENDENTE
  PROGRAMADO
  EXECUTADO
  BAIXADO_NO_SAP
}

// Modelos para autenticação mobile
model UsuarioMobile {
  id         Int               @id @default(autoincrement())
  matricula  String            @unique @db.VarChar(50)
  nome       String            @db.VarChar(255)
  email      String?           @unique @db.VarChar(255)
  senha      String            @db.VarChar(255)
  funcao     String            @db.VarChar(100)
  ativo      Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  deletedAt  DateTime?
  tokens     TokenMobile[]
  sessoes    SessaoMobile[]
  atividades AtividadeMobile[]
  anomalias  AnomaliaMobile[]

  @@index([matricula])
  @@map("usuarios_mobile")
}

model TokenMobile {
  id           Int           @id @default(autoincrement())
  token        String        @unique @db.VarChar(255)
  refreshToken String?       @unique @db.VarChar(255)
  usuarioId    Int
  expiresAt    DateTime
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  revoked      Boolean       @default(false)
  usuario      UsuarioMobile @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([refreshToken])
  @@index([usuarioId])
  @@map("tokens_mobile")
}

model SessaoMobile {
  id         Int           @id @default(autoincrement())
  usuarioId  Int
  deviceInfo String?       @db.Text
  lastActive DateTime      @default(now())
  createdAt  DateTime      @default(now())
  expiresAt  DateTime
  ativa      Boolean       @default(true)
  usuario    UsuarioMobile @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@map("sessoes_mobile")
}

// Modelos para dados do app mobile
model AtividadeMobile {
  id          Int                   @id @default(autoincrement())
  titulo      String                @db.VarChar(255)
  descricao   String                @db.Text
  dataInicio  DateTime
  dataFim     DateTime
  status      StatusAtividadeMobile @default(PENDENTE)
  progresso   Float                 @default(0)
  observacao  String?               @db.Text
  subestacao  String                @db.VarChar(255)
  equipamento String                @db.VarChar(255)
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  usuarioId   Int?
  usuario     UsuarioMobile?        @relation(fields: [usuarioId], references: [id])

  respostasAPR RespostaAPRMobile[]
  assinaturas  AssinaturaMobile[]

  @@index([status])
  @@index([usuarioId])
  @@map("atividades_mobile")
}

model RespostaAPRMobile {
  id          Int             @id @default(autoincrement())
  pergunta    String          @db.Text
  resposta    String          @db.VarChar(50)
  atividadeId Int
  atividade   AtividadeMobile @relation(fields: [atividadeId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())

  @@index([atividadeId])
  @@map("respostas_apr_mobile")
}

model AssinaturaMobile {
  id          Int             @id @default(autoincrement())
  nome        String          @db.VarChar(255)
  cargo       String          @db.VarChar(100)
  data        DateTime        @default(now())
  imagemUrl   String          @db.Text
  atividadeId Int
  atividade   AtividadeMobile @relation(fields: [atividadeId], references: [id], onDelete: Cascade)
  createdAt   DateTime        @default(now())

  @@index([atividadeId])
  @@map("assinaturas_mobile")
}

model AnomaliaMobile {
  id               Int            @id @default(autoincrement())
  regional         String         @db.VarChar(255)
  subestacao       String         @db.VarChar(255)
  sigla            String         @db.VarChar(10)
  tipoInspecao     String         @db.VarChar(100)
  ordemInspecao    String         @db.VarChar(50)
  nota             String?        @db.VarChar(100)
  si               String?        @db.VarChar(50)
  tecnicos         String         @db.Text
  item             Int
  data             DateTime
  tipo             String         @db.VarChar(100)
  grupoDefeito     String?        @db.VarChar(100)
  subgrupo         String?        @db.VarChar(100)
  descricaoDefeito String         @db.Text
  codigoDefeito    String?        @db.VarChar(50)
  prioridade       String?        @db.VarChar(5)
  fase             String?        @db.VarChar(5)
  ladoFonteCarga   String?        @db.VarChar(20)
  deltaTemperatura Float?
  observacoes      String?        @db.Text
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  usuarioId        Int?
  usuario          UsuarioMobile? @relation(fields: [usuarioId], references: [id])

  @@index([usuarioId])
  @@map("anomalias_mobile")
}

enum StatusAtividadeMobile {
  PENDENTE
  EM_ANDAMENTO
  CONCLUIDO
  CANCELADO
}
